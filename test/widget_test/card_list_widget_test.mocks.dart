// Mocks generated by Mockito 5.3.0 from annotations
// in first_app/test/widget_test/card_list_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i5;
import 'dart:typed_data' as _i6;

import 'package:first_app/src/core/util/card_state.dart' as _i10;
import 'package:first_app/src/data/model/card.dart' as _i8;
import 'package:first_app/src/data/model/card_event.dart' as _i9;
import 'package:first_app/src/domain/repository/repository_card.dart' as _i3;
import 'package:first_app/src/presentation/bloc/card_bloc.dart' as _i7;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRepositoryCard_2 extends _i1.SmartFake
    implements _i3.RepositoryCard {
  _FakeRepositoryCard_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSink_3<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
          returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
              this, Invocation.method(#head, [url], {#headers: headers}))))
      as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
          returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
              this, Invocation.method(#get, [url], {#headers: headers}))))
      as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> post(Uri? url,
      {Map<String, String>? headers,
        Object? body,
        _i5.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(
          #post, [url], {#headers: headers, #body: body, #encoding: encoding}),
          returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
              this,
              Invocation.method(#post, [
                url
              ], {
                #headers: headers,
                #body: body,
                #encoding: encoding
              })))) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> put(Uri? url,
      {Map<String, String>? headers,
        Object? body,
        _i5.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(
          #put, [url], {#headers: headers, #body: body, #encoding: encoding}),
          returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
              this,
              Invocation.method(#put, [
                url
              ], {
                #headers: headers,
                #body: body,
                #encoding: encoding
              })))) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> patch(Uri? url,
      {Map<String, String>? headers,
        Object? body,
        _i5.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(
          #patch, [url], {#headers: headers, #body: body, #encoding: encoding}),
          returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
              this,
              Invocation.method(#patch, [
                url
              ], {
                #headers: headers,
                #body: body,
                #encoding: encoding
              })))) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<_i2.Response> delete(Uri? url,
      {Map<String, String>? headers,
        Object? body,
        _i5.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#delete, [url],
          {#headers: headers, #body: body, #encoding: encoding}),
          returnValue: _i4.Future<_i2.Response>.value(_FakeResponse_0(
              this,
              Invocation.method(#delete, [
                url
              ], {
                #headers: headers,
                #body: body,
                #encoding: encoding
              })))) as _i4.Future<_i2.Response>);

  @override
  _i4.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: _i4.Future<String>.value('')) as _i4.Future<String>);

  @override
  _i4.Future<_i6.Uint8List> readBytes(Uri? url,
      {Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#readBytes, [url], {#headers: headers}),
          returnValue: _i4.Future<_i6.Uint8List>.value(_i6.Uint8List(0)))
      as _i4.Future<_i6.Uint8List>);

  @override
  _i4.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
          returnValue: _i4.Future<_i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                  this, Invocation.method(#send, [request]))))
      as _i4.Future<_i2.StreamedResponse>);

  @override
  void close() =>
      super.noSuchMethod(Invocation.method(#close, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [CardBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardBloc extends _i1.Mock implements _i7.CardBloc {
  MockCardBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RepositoryCard get repositoryCard =>
      (super.noSuchMethod(
          Invocation.getter(#repositoryCard),
          returnValue:
          _FakeRepositoryCard_2(this, Invocation.getter(#repositoryCard)))
      as _i3.RepositoryCard);

  @override
  String get defaultEndpoint =>
      (super.noSuchMethod(Invocation.getter(#defaultEndpoint), returnValue: '')
      as String);

  @override
  int get firstCardOfPage =>
      (super.noSuchMethod(Invocation.getter(#firstCardOfPage), returnValue: 0)
      as int);

  @override
  set firstCardOfPage(int? _firstCardOfPage) =>
      super.noSuchMethod(Invocation.setter(#firstCardOfPage, _firstCardOfPage),
          returnValueForMissingStub: null);

  @override
  int get lastCardOfPage =>
      (super.noSuchMethod(Invocation.getter(#lastCardOfPage), returnValue: 0)
      as int);

  @override
  set lastCardOfPage(int? _lastCardOfPage) =>
      super.noSuchMethod(Invocation.setter(#lastCardOfPage, _lastCardOfPage),
          returnValueForMissingStub: null);

  @override
  int get currentPage =>
      (super.noSuchMethod(Invocation.getter(#currentPage), returnValue: 0)
      as int);

  @override
  set currentPage(int? _currentPage) =>
      super.noSuchMethod(Invocation.setter(#currentPage, _currentPage),
          returnValueForMissingStub: null);

  @override
  List<_i8.HearthstoneCard> get allCards =>
      (super.noSuchMethod(Invocation.getter(#allCards),
          returnValue: <_i8.HearthstoneCard>[]) as List<_i8.HearthstoneCard>);

  @override
  set allCards(List<_i8.HearthstoneCard>? _allCards) =>
      super.noSuchMethod(Invocation.setter(#allCards, _allCards),
          returnValueForMissingStub: null);

  @override
  int get numberOfPagesCardList =>
      (super.noSuchMethod(Invocation.getter(#numberOfPagesCardList),
          returnValue: 0) as int);

  @override
  set numberOfPagesCardList(int? _numberOfPagesCardList) =>
      super.noSuchMethod(
          Invocation.setter(#numberOfPagesCardList, _numberOfPagesCardList),
          returnValueForMissingStub: null);

  @override
  Map<int, List<_i8.HearthstoneCard>> get page =>
      (super.noSuchMethod(Invocation.getter(#page),
          returnValue: <int, List<_i8.HearthstoneCard>>{})
      as Map<int, List<_i8.HearthstoneCard>>);

  @override
  set page(Map<int, List<_i8.HearthstoneCard>>? _page) =>
      super.noSuchMethod(Invocation.setter(#page, _page),
          returnValueForMissingStub: null);

  @override
  Sink<_i9.CardEvent> get cardListSink =>
      (super.noSuchMethod(Invocation.getter(#cardListSink),
          returnValue: _FakeSink_3<_i9.CardEvent>(
              this, Invocation.getter(#cardListSink))) as Sink<_i9.CardEvent>);

  @override
  _i4.Stream<_i9.CardEvent> get cardListStream =>
      (super.noSuchMethod(Invocation.getter(#cardListStream),
          returnValue: _i4.Stream<_i9.CardEvent>.empty())
      as _i4.Stream<_i9.CardEvent>);

  @override
  void dispose() =>
      super.noSuchMethod(Invocation.method(#dispose, []),
          returnValueForMissingStub: null);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
          Invocation.method(#initialize, []),
          returnValue: _i4.Future<void>.value(),
          returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<
          void>);

  @override
  _i4.Future<void> getCardListFromEndpoint(String? endpoint) =>
      (super
          .noSuchMethod(Invocation.method(#getCardListFromEndpoint, [endpoint]),
          returnValue: _i4.Future<void>.value(),
          returnValueForMissingStub: _i4.Future<void>.value())
      as _i4.Future<void>);

  @override
  _i4.Future<void> fillAllCardsList(String? endpoint) =>
      (super.noSuchMethod(
          Invocation.method(#fillAllCardsList, [endpoint]),
          returnValue: _i4.Future<void>.value(),
          returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<
          void>);

  @override
  _i4.Future<void> sinkCurrentCardList() =>
      (super.noSuchMethod(
          Invocation.method(#sinkCurrentCardList, []),
          returnValue: _i4.Future<void>.value(),
          returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<
          void>);

  @override
  _i4.Future<void> sinkNextCardList() =>
      (super.noSuchMethod(
          Invocation.method(#sinkNextCardList, []),
          returnValue: _i4.Future<void>.value(),
          returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<
          void>);

  @override
  _i4.Future<void> sinkPreviousCardList() =>
      (super.noSuchMethod(
          Invocation.method(#sinkPreviousCardList, []),
          returnValue: _i4.Future<void>.value(),
          returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<
          void>);

  @override
  _i4.Future<void> sinkAllCardList(String? endpoint) =>
      (super.noSuchMethod(
          Invocation.method(#sinkAllCardList, [endpoint]),
          returnValue: _i4.Future<void>.value(),
          returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<
          void>);
}

/// A class which mocks [CardEvent].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardEvent extends _i1.Mock implements _i9.CardEvent {
  MockCardEvent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.CardState get cardState =>
      (super.noSuchMethod(Invocation.getter(#cardState),
          returnValue: _i10.CardState.success) as _i10.CardState);
}
