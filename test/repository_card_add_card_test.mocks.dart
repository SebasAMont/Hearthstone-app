// Mocks generated by Mockito 5.3.2 from annotations
// in first_app/test/repository_card_add_card_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:first_app/src/data/datasource/local/DAOs/card_database.dart'
    as _i6;
import 'package:first_app/src/data/datasource/remote/card_api_provider.dart'
    as _i4;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_1<T extends Object?> extends _i1.SmartFake
    implements _i3.QuerySnapshot<T> {
  _FakeQuerySnapshot_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CardApiProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardApiProvider extends _i1.Mock implements _i4.CardApiProvider {
  MockCardApiProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  _i5.Future<String> fetchCardList(
    String? endpointString,
    _i2.Client? client,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCardList,
          [
            endpointString,
            client,
          ],
        ),
        returnValue: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
}

/// A class which mocks [CardDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardDatabase extends _i1.Mock implements _i6.CardDatabase {
  MockCardDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> addItem({
    required List<dynamic>? cardList,
    required String? subCollectionDoc,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addItem,
          [],
          {
            #cardList: cardList,
            #subCollectionDoc: subCollectionDoc,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.QuerySnapshot<Object?>> readItems({
    required String? subCollectionDoc,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readItems,
          [],
          {
            #subCollectionDoc: subCollectionDoc,
          },
        ),
        returnValue: _i5.Future<_i3.QuerySnapshot<Object?>>.value(
            _FakeQuerySnapshot_1<Object?>(
          this,
          Invocation.method(
            #readItems,
            [],
            {
              #subCollectionDoc: subCollectionDoc,
            },
          ),
        )),
      ) as _i5.Future<_i3.QuerySnapshot<Object?>>);

  @override
  _i5.Future<void> updateItem({
    required List<dynamic>? cardList,
    required String? docId,
    required String? subCollectionDoc,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [],
          {
            #cardList: cardList,
            #docId: docId,
            #subCollectionDoc: subCollectionDoc,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteItem({
    required String? docId,
    required String? subCollectionDoc,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [],
          {
            #docId: docId,
            #subCollectionDoc: subCollectionDoc,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
